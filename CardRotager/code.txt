
//public sealed class ImageRotater : Control, System.ComponentModel.ISupportInitialize {
//    private Bitmap _bitmap;
//    private float _angle;

//    public Bitmap Bitmap {
//        get { return _bitmap; }
//        set {
//            _bitmap = value;

//            if (_bitmap is null) {
//                return;
//            }

//            Invalidate(); // для вызова метода отрисовки OnPaint(...).
//        }
//    }

//    public float Angle {
//        get { return _angle; }
//        set {
//            _angle = value;

//            if (_bitmap is null) {
//                return;
//            }

//            Invalidate(); // для вызова метода отрисовки OnPaint(...).
//        }
//    }

//    protected override void Dispose(bool disposing) {
//        Bitmap?.Dispose();

//        if (disposing) {
//            Bitmap = null;
//            Angle = .0f;
//        }

//        base.Dispose(disposing);
//    }

//    public ImageRotater() {
//        DoubleBuffered = true; // что бы не было мерцаний.
//    }

//    protected override void OnPaint(PaintEventArgs e) {
//        e.Graphics.Clear(BackColor); // можно изменить на любой другой, я использую фоновый цвет.

//        if (Bitmap is null) {
//            base.OnPaint(e);
//            return;
//        }

//        e.Graphics.TranslateTransform(Bitmap.Width + .0f, Bitmap.Height + .0f);
//        e.Graphics.RotateTransform(Angle);
//        e.Graphics.TranslateTransform(-Bitmap.Width + .0f, -Bitmap.Height + .0f);
//        e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
//        e.Graphics.DrawImage(Bitmap, new Point(0, 0));

//        base.OnPaint(e);
//    }

//    public void BeginInit() {

//    }

//    public void EndInit() {

//    }
//}

//}

===================



        private void cbPick_CheckedChanged(object sender, EventArgs e) {
            //string[] s = tbPixel.Text.Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            //Color color = bitmap.GetPixel(int.Parse(s[0]), int.Parse(s[1]));
            //float hue = color.GetHue();
            //float saturation = color.GetSaturation();
            //float lightness = color.GetBrightness();
            //textBox1.Text += String.Format("\r\n{0}: h = {1:N3}, s = {2:N3}, b = {3:N3}", Util.ToHtml(color), hue * 100, saturation * 100, lightness * 100);
        }

        private void textBox1_KeyPress(object sender, KeyPressEventArgs e) {
            //if (e.KeyChar == 13) {
            //    string[] vs = textBox1.Text.Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            //    drawler.DrawDotX(graphics, Pens.Pink, int.Parse(vs[0]), int.Parse(vs[1]), 18);
            //    imageBlackWhite.Invalidate();
            //}
        }


=======================


                            //using (Graphics graphics = Graphics.FromImage(streamBitmap)) {
                            //    //    using (Font arialFont = new Font("Arial", 25)) {
                            //    //        graphics.DrawString(DateTime.Now.ToString("dd.MM.yyyy"), arialFont, Brushes.Black, location);
                            //    //    }
                            //}


=======================================



        //private bool replaceDots(Bitmap bitmap, Edge edge, ref int[] dots) {
        //    int yTopRestrict = edge.MaxY() + 3;
        //    bool updateDots;
        //    FindHDots(bitmap, edge.X, edge.X2, out updateDots, ref dots, yTopRestrict, -1);
        //    return updateDots;
        //}
===============================================



        private void imageRotater_MouseUp(object sender, MouseEventArgs e) {
            //if (bitmap != null) {
            //    drawler.DrawDotX(graphics, Pens.Red, e.X, e.Y, 20);
            //    imageBlackWhite.Invalidate();
            //}
        }

================================================

================================================

================================================

================================================




